/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.tuneer.seleniumapp;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.sql.*;
import java.time.LocalDateTime;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import static javax.swing.WindowConstants.EXIT_ON_CLOSE;
import javax.swing.table.*;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import static org.apache.poi.ss.usermodel.CellType.NUMERIC;
import static org.apache.poi.ss.usermodel.CellType.STRING;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

/**
 *
 * @author gdknmac
 */
public class DisplayData extends javax.swing.JFrame {

   
    
    /**
     * Creates new form DisplayData
     */
    public DisplayData() {
        initComponents();
        
    }
    
    WebDriver driver;
   
    String path = "/Users/gdknmac/Downloads/chromedriver-mac-arm64/chromedriver";
    
    public static ArrayList<UserLogin> userloginList = new ArrayList();
    public static String tableName;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        customers = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Welcome");
        setFont(new java.awt.Font("Al Bayan", 1, 12)); // NOI18N
        setForeground(java.awt.Color.white);
        setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        setType(java.awt.Window.Type.POPUP);

        jButton1.setText("Pick Excel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        customers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        customers.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(customers);

        jButton2.setText("Import Data");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Run Selenium");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Excel Export");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 694, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(18, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(32, 32, 32)
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addGap(15, 15, 15))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
  
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        new SeleniumApp().pickExcelandShow(this);
       
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
         ImportData();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            // TODO add your handling code here:
            runSeleniumFromDB(this);
        } catch (InterruptedException ex) {
            Logger.getLogger(DisplayData.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            // TODO add your handling code here:
            
            
            ArrayList<String> tableList = getListOfTables();
            
            String [] nameList=new String[tableList.size()];
            nameList=tableList.toArray(nameList);
            JFrame frame = new JFrame("Alert");
            String returnValue = (String) JOptionPane.showInputDialog(frame,
                    "Select the table name?","Tables Information",JOptionPane.QUESTION_MESSAGE,null,nameList,nameList[0]);
            String tname=returnValue;
            
            String url = "jdbc:mysql://localhost:3306/sales?autoReconnect=true&useSSL=false";
            String userid = "root";
            String password = "Root@2655";
          
            Connection connection = DriverManager.getConnection(url, userid, password);
            getDefendants(connection,tname);
            
        } catch (SQLException ex) {
            Logger.getLogger(DisplayData.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(DisplayData.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     *
     * @return
     */
    public ArrayList<String> getListOfTables(){
        ArrayList<String> tables = new ArrayList();
        
        
         //  Connect to an MySQL Database, run query, get result set
        String url = "jdbc:mysql://localhost:3306/sales?autoReconnect=true&useSSL=false";
        String userid = "root";
        String password = "Root@2655";
        String sql = "SHOW TABLES";
     
        try (Connection connection = DriverManager.getConnection( url, userid, password );
            Statement stmt = connection.createStatement();
            ResultSet rs = stmt.executeQuery( sql ))
        {
           
            
            ResultSetMetaData md = rs.getMetaData();
            
            System.out.println(md);
            
            int colcounts = md.getColumnCount();
            
            System.out.println(colcounts);
            
            String[] cols = new String[colcounts];
            
            
            for (int i = 1; i <= colcounts; i++) {
                cols[i - 1] = md.getColumnName(i);
            }

          

            while (rs.next()) {
                Object[] rowData = new Object[colcounts];
                for (int i = 1; i <= colcounts; i++) {
                    rowData[i - 1] = rs.getObject(i);
                    tables.add(rowData[i-1].toString());
                }
                
              // System.out.println(Arrays.toString(rowData)); // Debugging print
               
            }
           System.out.println(tables); // Debugging print
            
            
        }
        catch (SQLException e)
        {
            System.out.println( e.getMessage() );
        }
        
        return tables;
    }
    
    
   
    
   
    public void ImportData()
    {
        
        ArrayList<String> tableList = getListOfTables();
        
        String [] nameList=new String[tableList.size()];
        nameList=tableList.toArray(nameList);
        JFrame frame = new JFrame("Alert");
        String returnValue = (String) JOptionPane.showInputDialog(frame,
        "Select the table name?","Tables Information",JOptionPane.QUESTION_MESSAGE,null,nameList,nameList[0]);
        String tname=returnValue;
        
        if(tname!=null&&!tname.equalsIgnoreCase("")){
        
        
        DefaultTableModel model = (DefaultTableModel)customers.getModel(); 
        model.setRowCount(0);

        //  Connect to an MySQL Database, run query, get result set
        String url = "jdbc:mysql://localhost:3306/sales?autoReconnect=true&useSSL=false";
        String userid = "root";
        String password = "Root@2655";
        String sql = "SELECT * FROM "+tname+" LIMIT 10";
       // String sql = "SELECT * FROM March2023";

        // Java SE 7 has try-with-resources
        // This will ensure that the sql objects are closed when the program 
        // is finished with them
        try (Connection connection = DriverManager.getConnection( url, userid, password );
            Statement stmt = connection.createStatement();
            ResultSet rs = stmt.executeQuery( sql ))
        {
           
            
            ResultSetMetaData md = rs.getMetaData();
            
            System.out.println(md);
            
            int colcounts = md.getColumnCount();
            
            System.out.println(colcounts);
            
            String[] cols = new String[colcounts];
            
            
            for (int i = 1; i <= colcounts; i++) {
                cols[i - 1] = md.getColumnName(i);
            }

           model.setColumnIdentifiers(cols);

            while (rs.next()) {
                Object[] rowData = new Object[colcounts];
                for (int i = 1; i <= colcounts; i++) {
                    rowData[i - 1] = rs.getObject(i);
                    //System.out.println(rs.getObject(i)); // Debugging print
                }
                model.addRow(rowData);
                UserLogin userLogin = new UserLogin();
                userLogin.setYear(rowData[0].toString());
                userLogin.setMerchantName(rowData[1].toString());
                userLogin.setEmail(rowData[2].toString());
                userLogin.setPassword(rowData[3].toString());
                userLogin.setLastName(rowData[4].toString());
                userLogin.setFirstName(rowData[5].toString());
                userLogin.setCellPhone(rowData[6].toString());
                userLogin.setStreetAddress(rowData[7].toString());
                userLogin.setAptBuilding(rowData[8].toString());
                userLogin.setCity(rowData[9].toString());
                userLogin.setZip(rowData[10].toString());
                userLogin.setColumnCount(colcounts);
                userloginList.add(userLogin);
               //System.out.println(Arrays.toString(rowData)); // Debugging print
            }
           
           
            System.out.println(userloginList.toArray()); // Debugging print
            tableName = tname;
        }
        catch (SQLException e)
        {
            System.out.println( e.getMessage() );
        }

        
   
        customers.setModel(model);
       
        }
      
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable customers;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables

    private void runSeleniumFromDB(DisplayData aThis) throws InterruptedException{
        
        if(userloginList.size()==0){
            return;
        } 
        
        System.setProperty("webdriver.chrome.driver", path);

               
        
        for(int b=0;b<userloginList.size();b++){
        
                driver = new ChromeDriver();
                driver.get("http://3.135.219.244:2068/");
                
                driver.findElement(By.ById.id("navlogin")).click();

                driver.findElement(By.xpath("//*[@id=\"loginModal\"]/div/div/div[3]/a[2]")).click();

                WebElement element = driver.findElement(By.ById.id("Email"));
                Thread.sleep(500);
                element.sendKeys(""+userloginList.get(b).getEmail());
                
                
                 element = driver.findElement(By.ById.id("Password"));
                Thread.sleep(500);
                element.sendKeys(""+userloginList.get(b).getPassword());
                
                
                
                 element = driver.findElement(By.ById.id("LastName"));
                Thread.sleep(500);
                element.sendKeys(""+userloginList.get(b).getLastName());
                
                
                
                 element = driver.findElement(By.ById.id("FirstName"));
                Thread.sleep(500);
                element.sendKeys(""+userloginList.get(b).getFirstName());
                
                
                
                 element = driver.findElement(By.ById.id("CellPhone"));
                Thread.sleep(500);
                element.sendKeys(""+userloginList.get(b).getCellPhone());
                
                
                
                 element = driver.findElement(By.ById.id("Address1"));
                Thread.sleep(500);
                element.sendKeys(""+userloginList.get(b).getStreetAddress());
                
                
                element = driver.findElement(By.ById.id("Address2"));
                Thread.sleep(500);
                element.sendKeys(""+userloginList.get(b).getAptBuilding());
                
                
                element = driver.findElement(By.ById.id("City"));
                Thread.sleep(500);
                element.sendKeys(""+userloginList.get(b).getCity());
                
                
                element = driver.findElement(By.ById.id("Zip"));
                Thread.sleep(500);
                element.sendKeys(""+userloginList.get(b).getZip());
                
                
                
                driver.findElement(By.ById.id("signUp")).click();
                Thread.sleep(500);
                userloginList.get(b).setStatus(true);
                Thread.sleep(500);
                
                driver.close();
               // break;
        }
        
        createDuplicateTable(tableName,aThis);
       
    }

    private void createDuplicateTable(String tableName, DisplayData aThis) {
        try {
            //  Connect to an MySQL Database, run query, get result set
            String url = "jdbc:mysql://localhost:3306/sales?autoReconnect=true&useSSL=false";
            String userid = "root";
            String password = "Root@2655";
            String sql = "CREATE TABLE "+tableName+"_updated"+" LIKE "+tableName;
            //ALTER TABLE table_name ADD column_name datatype
            Connection connection = DriverManager.getConnection(url, userid, password);
            Statement stmt = connection.createStatement();
            int myResult = stmt.executeUpdate(sql);
            
            System.out.println(myResult+" duplicate table Created");
            if(myResult==0){
                String sqlColiumn = "ALTER TABLE "+tableName+"_updated"+" ADD (Status VARCHAR(40), CreateDate VARCHAR(100))";
                Statement stmtcolumn = connection.createStatement();
                int myResultColumn = stmtcolumn.executeUpdate(sqlColiumn);
                System.out.println(myResultColumn+" column Added");
                if(myResultColumn==0){
                  InsertUpdatedData(userloginList,connection,tableName+"_updated",aThis);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(DisplayData.class.getName()).log(Level.SEVERE, null, ex);
        }
            
            
            
            
          
   
    }

    private void InsertUpdatedData(ArrayList<UserLogin> userloginList, Connection connection, String newTableName, DisplayData aThis) {
         
        try {
            try (connection) {
                int columnCount = userloginList.get(0).getColumnCount()+2;
                
                System.out.println("listSize: "+columnCount);
                // Construct the SQL INSERT statement dynamically
                StringBuilder placeholders = new StringBuilder();
                for (int i = 0; i < columnCount; i++) {
                    placeholders.append("?");
                    if (i != columnCount - 1) {
                        placeholders.append(", ");
                    }
                }
                
                String sql = "INSERT INTO " +newTableName +" VALUES (" + placeholders.toString() + ")";
                System.out.println("SQL String: "+sql);
                
                PreparedStatement statement = connection.prepareStatement(sql);
                
                int count = 0;
                
                for(int k=0;k<userloginList.size();k++){
                    if(userloginList.get(k)!=null){
                        
                        //Years, MerchantName, Email, Password, LastName, FirstName, CelPhone, StreetAddress, AptBuilding, City, Zip, Status
                        statement.setString(1, userloginList.get(k).getYear());
                        statement.setString(2, userloginList.get(k).getMerchantName());
                        statement.setString(3, userloginList.get(k).getEmail());
                        statement.setString(4, userloginList.get(k).getPassword());
                        statement.setString(5, userloginList.get(k).getLastName());
                        statement.setString(6, userloginList.get(k).getFirstName());
                        statement.setString(7, userloginList.get(k).getCellPhone());
                        statement.setString(8, userloginList.get(k).getStreetAddress());
                        statement.setString(9, userloginList.get(k).getAptBuilding());
                        statement.setString(10, userloginList.get(k).getCity());
                        statement.setString(11, userloginList.get(k).getZip());
                        statement.setString(12, userloginList.get(k).isStatus()+"");
                        statement.setString(13, LocalDateTime.now().toString());
                        statement.addBatch();
                    }
                }
                
                
                
                statement.executeBatch();
                
                connection.close();
            }
             
            JOptionPane.showMessageDialog(aThis, "Saved Successfully.");
                      
        } catch (SQLException ex) {
            Logger.getLogger(DisplayData.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    public void getDefendants(Connection con , String db) throws IOException { 
        try{ 
            // /Users/itteam2/Downloads
            File file = new File("\\Users\\gdknmac\\Downloads\\Excels\\test.xls");
            if(!file.exists()){
               file.createNewFile();
            }
            FileInputStream fileinput = new FileInputStream("\\Users\\gdknmac\\Downloads\\Excels\\test.xls");
            Workbook readWorkbook = WorkbookFactory.create(fileinput);
            
            XSSFWorkbook writeWorkbook = new XSSFWorkbook();
            XSSFSheet desSheet = writeWorkbook.createSheet(db);
            
            Statement stmt = null;
            ResultSet rs = null;
            String query ="SELECT * FROM "+db;
                
                stmt = con.createStatement();
                rs = stmt.executeQuery(query);
                ResultSetMetaData rsmd = rs.getMetaData();
                int columnsNumber = rsmd.getColumnCount();
                
                Row desRow1 = desSheet.createRow(0);
                for(int col=0 ;col < columnsNumber;col++) {
                    Cell newpath = desRow1.createCell(col);
                    newpath.setCellValue(rsmd.getColumnLabel(col+1));  
                }
                while(rs.next()) {
                    System.out.println("Row number" + rs.getRow() );
                    Row desRow = desSheet.createRow(rs.getRow());
                    for(int col=0 ;col < columnsNumber;col++) {
                        Cell newpath = desRow.createCell(col);
                        newpath.setCellValue(rs.getString(col+1));
                    }
                    fileinput.close();
                    FileOutputStream fileOut = new FileOutputStream("\\Users\\gdknmac\\Downloads\\Excels\\test.xlsx");
                    writeWorkbook.write(fileOut);
                    fileOut.close();
                    
                }
        }
        catch (FileNotFoundException ex) {
            Logger.getLogger(DisplayData.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DisplayData.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
